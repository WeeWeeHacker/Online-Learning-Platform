// <auto-generated />
using System;
using CacheClass.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CacheClass.Migrations
{
    [DbContext(typeof(Ml2Context))]
    [Migration("20241213151733_AddRoleToAdmin")]
    partial class AddRoleToAdmin
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CacheClass.Models.Achievement", b =>
                {
                    b.Property<int>("AchievementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AchievementID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AchievementId"));

                    b.Property<int?>("BadgeId")
                        .HasColumnType("int")
                        .HasColumnName("BadgeID");

                    b.Property<DateOnly?>("DateEarned")
                        .HasColumnType("date")
                        .HasColumnName("date_earned");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("description");

                    b.Property<int?>("LearnerID")
                        .HasColumnType("int")
                        .HasColumnName("LearnerID");

                    b.Property<string>("Type")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("type");

                    b.HasKey("AchievementId")
                        .HasName("PK__Achievem__276330E0278FA325");

                    b.ToTable("Achievement", (string)null);
                });

            modelBuilder.Entity("CacheClass.Models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AdminId");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("CacheClass.Models.Assessment", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<string>("Criteria")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("criteria");

                    b.Property<string>("Dscription")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("dscription");

                    b.Property<int?>("ModuleId")
                        .HasColumnType("int")
                        .HasColumnName("ModuleID");

                    b.Property<int?>("PassingMarks")
                        .HasColumnType("int")
                        .HasColumnName("passing_marks");

                    b.Property<string>("Title")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("title");

                    b.Property<int?>("TotalMarks")
                        .HasColumnType("int")
                        .HasColumnName("total_marks");

                    b.Property<string>("Type")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("type");

                    b.Property<int?>("Weightage")
                        .HasColumnType("int")
                        .HasColumnName("weightage");

                    b.HasKey("Id")
                        .HasName("PK__Assessme__3214EC27AAD1B112");

                    b.HasIndex("CourseId");

                    b.HasIndex("ModuleId");

                    b.ToTable("Assessments");
                });

            modelBuilder.Entity("CacheClass.Models.Badge", b =>
                {
                    b.Property<int>("BadgeId")
                        .HasColumnType("int")
                        .HasColumnName("BadgeID");

                    b.Property<string>("Criteria")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("criteria");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("description");

                    b.Property<int?>("Points")
                        .HasColumnType("int")
                        .HasColumnName("points");

                    b.Property<string>("Title")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("title");

                    b.HasKey("BadgeId")
                        .HasName("PK__Badge__1918237C86317BC7");

                    b.ToTable("Badge", (string)null);
                });

            modelBuilder.Entity("CacheClass.Models.Collaborative", b =>
                {
                    b.Property<int>("QuestId")
                        .HasColumnType("int")
                        .HasColumnName("QuestID");

                    b.Property<DateOnly?>("Deadline")
                        .HasColumnType("date")
                        .HasColumnName("deadline");

                    b.Property<int?>("MaxNumParticipants")
                        .HasColumnType("int")
                        .HasColumnName("max_num_participants");

                    b.HasKey("QuestId")
                        .HasName("PK__Collabor__B6619ACB646EA16A");

                    b.ToTable("Collaborative", (string)null);
                });

            modelBuilder.Entity("CacheClass.Models.ContentLibaray", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("ContentUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("contentURL");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("description");

                    b.Property<string>("Metadata")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("metadata");

                    b.Property<int?>("ModuleId")
                        .HasColumnType("int")
                        .HasColumnName("ModuleID");

                    b.Property<string>("Title")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Type")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("PK__ContentL__3214EC27FD714B35");

                    b.HasIndex("CourseId");

                    b.HasIndex("ModuleId");

                    b.ToTable("ContentLibaray", (string)null);
                });

            modelBuilder.Entity("CacheClass.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<int?>("CreditPoints")
                        .HasColumnType("int")
                        .HasColumnName("credit_points");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("description");

                    b.Property<string>("DifficultyLevel")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("difficulty_level");

                    b.Property<string>("LearningObjective")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("learning_objective");

                    b.Property<string>("Prerequisites")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("prerequisites");

                    b.Property<string>("Title")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("CourseId")
                        .HasName("PK__Course__C92D7187D807DD7B");

                    b.ToTable("Course", (string)null);
                });

            modelBuilder.Entity("CacheClass.Models.CourseEnrollment", b =>
                {
                    b.Property<int>("EnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EnrollmentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EnrollmentId"));

                    b.Property<DateOnly?>("CompletionDate")
                        .HasColumnType("date")
                        .HasColumnName("completion_date");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<DateOnly?>("EnrollmentDate")
                        .HasColumnType("date")
                        .HasColumnName("enrollment_date");

                    b.Property<int?>("LearnerID")
                        .HasColumnType("int")
                        .HasColumnName("LearnerID");

                    b.Property<string>("Status")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("status");

                    b.HasKey("EnrollmentId")
                        .HasName("PK__Course_e__7F6877FB4FA3C792");

                    b.HasIndex("CourseId");

                    b.HasIndex("LearnerID");

                    b.ToTable("Course_enrollment", (string)null);
                });

            modelBuilder.Entity("CacheClass.Models.DiscussionForum", b =>
                {
                    b.Property<int>("ForumId")
                        .HasColumnType("int")
                        .HasColumnName("ForumID");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("description");

                    b.Property<byte[]>("LastActive")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("last_active");

                    b.Property<int?>("ModuleId")
                        .HasColumnType("int")
                        .HasColumnName("ModuleID");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("datetime")
                        .HasColumnName("timestamp");

                    b.Property<string>("Title")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("title");

                    b.HasKey("ForumId")
                        .HasName("PK__Discussi__E210AC4F9E1CD559");

                    b.HasIndex("CourseId");

                    b.HasIndex("ModuleId");

                    b.ToTable("Discussion_forum", (string)null);
                });

            modelBuilder.Entity("CacheClass.Models.EmotionalFeedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .HasColumnType("int")
                        .HasColumnName("FeedbackID");

                    b.Property<string>("EmotionalState")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("emotional_state");

                    b.Property<int?>("LearnerID")
                        .HasColumnType("int")
                        .HasColumnName("LearnerID");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("timestamp");

                    b.HasKey("FeedbackId")
                        .HasName("PK__Emotiona__6A4BEDF69A54E2FD");

                    b.HasIndex("LearnerID");

                    b.ToTable("Emotional_feedback", (string)null);
                });

            modelBuilder.Entity("CacheClass.Models.EmotionalfeedbackReview", b =>
                {
                    b.Property<int>("FeedbackId")
                        .HasColumnType("int")
                        .HasColumnName("FeedbackID");

                    b.Property<int>("InstructorId")
                        .HasColumnType("int")
                        .HasColumnName("InstructorID");

                    b.Property<string>("Feedback")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("feedback");

                    b.HasKey("FeedbackId", "InstructorId")
                        .HasName("PK__Emotiona__C39BFD41C72E957E");

                    b.HasIndex("InstructorId");

                    b.ToTable("Emotionalfeedback_review", (string)null);
                });

            modelBuilder.Entity("CacheClass.Models.FilledSurvey", b =>
                {
                    b.Property<int>("SurveyId")
                        .HasColumnType("int")
                        .HasColumnName("SurveyID");

                    b.Property<string>("Question")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("LearnerID")
                        .HasColumnType("int")
                        .HasColumnName("LearnerID");

                    b.Property<string>("Answer")
                        .HasColumnType("text");

                    b.HasKey("SurveyId", "Question", "LearnerID")
                        .HasName("PK__FilledSu__D89C33C73F24E9D3");

                    b.HasIndex("LearnerID");

                    b.ToTable("FilledSurvey", (string)null);
                });

            modelBuilder.Entity("CacheClass.Models.HealthCondition", b =>
                {
                    b.Property<int>("LearnerID")
                        .HasColumnType("int")
                        .HasColumnName("LearnerID");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int")
                        .HasColumnName("ProfileID");

                    b.Property<string>("Condition")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("condition");

                    b.HasKey("LearnerID", "ProfileId", "Condition")
                        .HasName("PK__HealthCo__930320B02137C295");

                    b.ToTable("HealthCondition", (string)null);
                });

            modelBuilder.Entity("CacheClass.Models.Instructor", b =>
                {
                    b.Property<int>("InstructorId")
                        .HasColumnType("int")
                        .HasColumnName("InstructorID");

                    b.Property<string>("Email")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("email");

                    b.Property<string>("ExpertiseArea")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("expertise_area");

                    b.Property<string>("LastestQualification")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("lastest_qualification");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("name");

                    b.HasKey("InstructorId")
                        .HasName("PK__Instruct__9D010B7B60F990BE");

                    b.ToTable("Instructor", (string)null);
                });

            modelBuilder.Entity("CacheClass.Models.InteractionLog", b =>
                {
                    b.Property<int>("LogId")
                        .HasColumnType("int")
                        .HasColumnName("LogID");

                    b.Property<string>("ActionType")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("action_type");

                    b.Property<int?>("ActivityId")
                        .HasColumnType("int")
                        .HasColumnName("activity_ID");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<int?>("LearnerID")
                        .HasColumnType("int")
                        .HasColumnName("LearnerID");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("LogId")
                        .HasName("PK__Interact__5E5499A8D2891D44");

                    b.HasIndex("ActivityId");

                    b.HasIndex("LearnerID");

                    b.ToTable("Interaction_log", (string)null);
                });

            modelBuilder.Entity("CacheClass.Models.Leaderboard", b =>
                {
                    b.Property<int>("BoardId")
                        .HasColumnType("int")
                        .HasColumnName("BoardID");

                    b.Property<string>("Season")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("season");

                    b.HasKey("BoardId")
                        .HasName("PK__Leaderbo__F9646BD2D391C7E9");

                    b.ToTable("Leaderboard", (string)null);
                });

            modelBuilder.Entity("CacheClass.Models.Learner", b =>
                {
                    b.Property<int>("LearnerID")
                        .HasColumnType("int")
                        .HasColumnName("LearnerID");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birth_date");

                    b.Property<string>("Country")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("country");

                    b.Property<string>("CulturalBackground")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("cultural_background");

                    b.Property<string>("FirstName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("first_name");

                    b.Property<string>("Gender")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("gender");

                    b.Property<string>("LastName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("last_name");

                    b.HasKey("LearnerID")
                        .HasName("PK__Learner__67ABFCFABF29C33C");

                    b.ToTable("Learner", (string)null);
                });

            modelBuilder.Entity("CacheClass.Models.LearnerDiscussion", b =>
                {
                    b.Property<int>("ForumId")
                        .HasColumnType("int")
                        .HasColumnName("ForumID");

                    b.Property<int>("LearnerID")
                        .HasColumnType("int")
                        .HasColumnName("LearnerID");

                    b.Property<string>("Post")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<byte[]>("Time")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("time");

                    b.HasKey("ForumId", "LearnerID", "Post")
                        .HasName("PK__LearnerD__FBCECC4A15F95210");

                    b.HasIndex("LearnerID");

                    b.ToTable("LearnerDiscussion", (string)null);
                });

            modelBuilder.Entity("CacheClass.Models.LearnerMastery", b =>
                {
                    b.Property<int>("LearnerID")
                        .HasColumnType("int")
                        .HasColumnName("LearnerID");

                    b.Property<int>("QuestId")
                        .HasColumnType("int")
                        .HasColumnName("QuestID");

                    b.Property<string>("CompletionStatus")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("completion_status");

                    b.HasKey("LearnerID", "QuestId")
                        .HasName("PK__LearnerM__CCCDE556A8D3E201");

                    b.HasIndex("QuestId");

                    b.ToTable("LearnerMastery", (string)null);
                });

            modelBuilder.Entity("CacheClass.Models.LearnersCollaboration", b =>
                {
                    b.Property<int>("LearnerID")
                        .HasColumnType("int")
                        .HasColumnName("LearnerID");

                    b.Property<int>("QuestId")
                        .HasColumnType("int")
                        .HasColumnName("QuestID");

                    b.Property<string>("CompletionStatus")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("completion_status");

                    b.HasKey("LearnerID", "QuestId")
                        .HasName("PK__Learners__CCCDE556CFB7C248");

                    b.HasIndex("QuestId");

                    b.ToTable("LearnersCollaboration", (string)null);
                });

            modelBuilder.Entity("CacheClass.Models.LearningActivity", b =>
                {
                    b.Property<int>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ActivityID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActivityId"));

                    b.Property<string>("ActivityType")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("activity_type");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<string>("InstructionDetails")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("instruction_details");

                    b.Property<int?>("MaxPoints")
                        .HasColumnType("int")
                        .HasColumnName("Max_points");

                    b.Property<int?>("ModuleId")
                        .HasColumnType("int")
                        .HasColumnName("ModuleID");

                    b.HasKey("ActivityId")
                        .HasName("PK__Learning__45F4A7F1BF716625");

                    b.HasIndex("CourseId");

                    b.HasIndex("ModuleId");

                    b.ToTable("LearningActivities");
                });

            modelBuilder.Entity("CacheClass.Models.LearningGoal", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<DateOnly?>("Deadline")
                        .HasColumnType("date")
                        .HasColumnName("deadline");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("description");

                    b.Property<string>("Status")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("PK__Learning__3214EC27A14C0C35");

                    b.ToTable("Learning_goal", (string)null);
                });

            modelBuilder.Entity("CacheClass.Models.LearningPath", b =>
                {
                    b.Property<int>("PathId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pathID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PathId"));

                    b.Property<string>("AdaptiveRules")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("adaptive_rules");

                    b.Property<string>("CompletionStatus")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("completion_status");

                    b.Property<string>("CustomContent")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("custom_content");

                    b.Property<int?>("LearnerID")
                        .HasColumnType("int")
                        .HasColumnName("LearnerID");

                    b.Property<int?>("ProfileId")
                        .HasColumnType("int")
                        .HasColumnName("ProfileID");

                    b.HasKey("PathId")
                        .HasName("PK__Learning__BFB8200A902835BB");

                    b.HasIndex("LearnerID", "ProfileId");

                    b.ToTable("Learning_path", (string)null);
                });

            modelBuilder.Entity("CacheClass.Models.LearningPreference", b =>
                {
                    b.Property<int>("LearnerID")
                        .HasColumnType("int")
                        .HasColumnName("LearnerID");

                    b.Property<string>("Preference")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("preference");

                    b.HasKey("LearnerID", "Preference")
                        .HasName("PK__Learning__6032E158DB56B876");

                    b.ToTable("LearningPreference", (string)null);
                });

            modelBuilder.Entity("CacheClass.Models.Module", b =>
                {
                    b.Property<int>("ModuleId")
                        .HasColumnType("int")
                        .HasColumnName("ModuleID");

                    b.Property<string>("ContentUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("contentURL");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<string>("Difficulty")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("difficulty");

                    b.Property<string>("Title")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("ModuleId")
                        .HasName("PK__Modules__2B7477870C331649");

                    b.HasIndex("CourseId");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("CacheClass.Models.ModuleContent", b =>
                {
                    b.Property<int>("ModuleId")
                        .HasColumnType("int")
                        .HasColumnName("ModuleID");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<string>("ContentType")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("content_type");

                    b.HasKey("ModuleId", "CourseId", "ContentType")
                        .HasName("PK__ModuleCo__402E75DAEA44F9F6");

                    b.HasIndex("CourseId");

                    b.ToTable("ModuleContent", (string)null);
                });

            modelBuilder.Entity("CacheClass.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Message")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("message");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("timestamp");

                    b.Property<string>("UrgencyLevel")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("urgency_level");

                    b.HasKey("Id")
                        .HasName("PK__Notifica__3214EC2735D9AB29");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("CacheClass.Models.Pathreview", b =>
                {
                    b.Property<int>("InstructorId")
                        .HasColumnType("int")
                        .HasColumnName("InstructorID");

                    b.Property<int>("PathId")
                        .HasColumnType("int")
                        .HasColumnName("PathID");

                    b.Property<string>("Feedback")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("feedback");

                    b.HasKey("InstructorId", "PathId")
                        .HasName("PK__Pathrevi__11D776B85713958F");

                    b.HasIndex("PathId");

                    b.ToTable("Pathreview", (string)null);
                });

            modelBuilder.Entity("CacheClass.Models.PersonalizationProfile", b =>
                {
                    b.Property<int>("LearnerID")
                        .HasColumnType("int")
                        .HasColumnName("LearnerID");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int")
                        .HasColumnName("ProfileID");

                    b.Property<string>("EmotionalState")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("emotional_state");

                    b.Property<string>("PersonalityType")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("personality_type");

                    b.Property<string>("PreferedContentType")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Prefered_content_type");

                    b.HasKey("LearnerID", "ProfileId")
                        .HasName("PK__Personal__353B34725D03E44F");

                    b.ToTable("PersonalizationProfiles");
                });

            modelBuilder.Entity("CacheClass.Models.Quest", b =>
                {
                    b.Property<int>("QuestId")
                        .HasColumnType("int")
                        .HasColumnName("QuestID");

                    b.Property<string>("Criteria")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("criteria");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("description");

                    b.Property<string>("DifficultyLevel")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("difficulty_level");

                    b.Property<string>("Title")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("title");

                    b.HasKey("QuestId")
                        .HasName("PK__Quest__B6619ACB65BFD31F");

                    b.ToTable("Quest", (string)null);
                });

            modelBuilder.Entity("CacheClass.Models.QuestReward", b =>
                {
                    b.Property<int>("RewardId")
                        .HasColumnType("int")
                        .HasColumnName("RewardID");

                    b.Property<int>("QuestId")
                        .HasColumnType("int")
                        .HasColumnName("QuestID");

                    b.Property<int>("LearnerID")
                        .HasColumnType("int")
                        .HasColumnName("LearnerID");

                    b.Property<byte[]>("TimeEarned")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("Time_earned");

                    b.HasKey("RewardId", "QuestId", "LearnerID")
                        .HasName("PK__QuestRew__D251A7C94328649A");

                    b.HasIndex("LearnerID");

                    b.HasIndex("QuestId");

                    b.ToTable("QuestReward", (string)null);
                });

            modelBuilder.Entity("CacheClass.Models.Ranking", b =>
                {
                    b.Property<int>("BoardId")
                        .HasColumnType("int")
                        .HasColumnName("BoardID");

                    b.Property<int>("LearnerID")
                        .HasColumnType("int")
                        .HasColumnName("LearnerID");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<int?>("Rank")
                        .HasColumnType("int")
                        .HasColumnName("rank");

                    b.Property<int?>("TotalPoints")
                        .HasColumnType("int")
                        .HasColumnName("total_points");

                    b.HasKey("BoardId", "LearnerID")
                        .HasName("PK__Ranking__4F1ED41D900804B7");

                    b.HasIndex("CourseId");

                    b.HasIndex("LearnerID");

                    b.ToTable("Ranking", (string)null);
                });

            modelBuilder.Entity("CacheClass.Models.Reward", b =>
                {
                    b.Property<int>("RewardId")
                        .HasColumnType("int")
                        .HasColumnName("RewardID");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("description");

                    b.Property<string>("Type")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("type");

                    b.Property<int?>("Value")
                        .HasColumnType("int")
                        .HasColumnName("value");

                    b.HasKey("RewardId")
                        .HasName("PK__Reward__825015999656B3DC");

                    b.ToTable("Reward", (string)null);
                });

            modelBuilder.Entity("CacheClass.Models.Skill", b =>
                {
                    b.Property<int>("LearnerID")
                        .HasColumnType("int")
                        .HasColumnName("LearnerID");

                    b.Property<string>("Skill1")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("skill");

                    b.HasKey("LearnerID", "Skill1")
                        .HasName("PK__Skills__C45BDEA5F7B67C58");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("CacheClass.Models.SkillMastery", b =>
                {
                    b.Property<int>("QuestId")
                        .HasColumnType("int")
                        .HasColumnName("QuestID");

                    b.Property<string>("Skill")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("skill");

                    b.HasKey("QuestId", "Skill")
                        .HasName("PK__Skill_Ma__1591B8947FAD3F9B");

                    b.ToTable("Skill_Mastery", (string)null);
                });

            modelBuilder.Entity("CacheClass.Models.SkillProgression", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int?>("LearnerID")
                        .HasColumnType("int")
                        .HasColumnName("LearnerID");

                    b.Property<string>("ProficiencyLevel")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("proficiency_level");

                    b.Property<string>("SkillName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("skill_name");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("timestamp");

                    b.HasKey("Id")
                        .HasName("PK__SkillPro__3214EC271C556898");

                    b.HasIndex("LearnerID", "SkillName");

                    b.ToTable("SkillProgression", (string)null);
                });

            modelBuilder.Entity("CacheClass.Models.Survey", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Title")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id")
                        .HasName("PK__Survey__3214EC27941A649C");

                    b.ToTable("Survey", (string)null);
                });

            modelBuilder.Entity("CacheClass.Models.SurveyQuestion", b =>
                {
                    b.Property<int>("SurveyId")
                        .HasColumnType("int")
                        .HasColumnName("SurveyID");

                    b.Property<string>("Question")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("SurveyId", "Question")
                        .HasName("PK__SurveyQu__23FB983B5D79D476");

                    b.ToTable("SurveyQuestions");
                });

            modelBuilder.Entity("CacheClass.Models.Takenassessment", b =>
                {
                    b.Property<int>("AssessmentId")
                        .HasColumnType("int")
                        .HasColumnName("AssessmentID");

                    b.Property<int>("LearnerID")
                        .HasColumnType("int")
                        .HasColumnName("LearnerID");

                    b.Property<int?>("ScoredPoint")
                        .HasColumnType("int")
                        .HasColumnName("scoredPoint");

                    b.HasKey("AssessmentId", "LearnerID")
                        .HasName("PK__Takenass__8B5147F11478F017");

                    b.HasIndex("LearnerID");

                    b.ToTable("Takenassessment", (string)null);
                });

            modelBuilder.Entity("CacheClass.Models.TargetTrait", b =>
                {
                    b.Property<int>("ModuleId")
                        .HasColumnType("int")
                        .HasColumnName("ModuleID");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<string>("Trait")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("trait");

                    b.HasKey("ModuleId", "CourseId", "Trait")
                        .HasName("PK__Target_t__7E4CF787A7841594");

                    b.HasIndex("CourseId");

                    b.ToTable("Target_traits", (string)null);
                });

            modelBuilder.Entity("LearnersGoal", b =>
                {
                    b.Property<int>("GoalId")
                        .HasColumnType("int")
                        .HasColumnName("GoalID");

                    b.Property<int>("LearnerID")
                        .HasColumnType("int")
                        .HasColumnName("LearnerID");

                    b.HasKey("GoalId", "LearnerID")
                        .HasName("PK__Learners__3C3540FE147112F4");

                    b.HasIndex("LearnerID");

                    b.ToTable("LearnersGoals", (string)null);
                });

            modelBuilder.Entity("RecievedNotification", b =>
                {
                    b.Property<int>("NotificationId")
                        .HasColumnType("int")
                        .HasColumnName("NotificationID");

                    b.Property<int>("LearnerID")
                        .HasColumnType("int")
                        .HasColumnName("LearnerID");

                    b.HasKey("NotificationId", "LearnerID")
                        .HasName("PK__Recieved__96B591FD97E4723A");

                    b.HasIndex("LearnerID");

                    b.ToTable("RecievedNotification", (string)null);
                });

            modelBuilder.Entity("Teach", b =>
                {
                    b.Property<int>("InstructorId")
                        .HasColumnType("int")
                        .HasColumnName("InstructorID");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.HasKey("InstructorId", "CourseId")
                        .HasName("PK__Teaches__F193DC63F02B2156");

                    b.HasIndex("CourseId");

                    b.ToTable("Teaches", (string)null);
                });

            modelBuilder.Entity("CacheClass.Models.Assessment", b =>
                {
                    b.HasOne("CacheClass.Models.Course", "Course")
                        .WithMany("Assessments")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK__Assessmen__Cours__571DF1D5");

                    b.HasOne("CacheClass.Models.Module", "Module")
                        .WithMany("Assessments")
                        .HasForeignKey("ModuleId")
                        .HasConstraintName("FK__Assessmen__Modul__5629CD9C");

                    b.Navigation("Course");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("CacheClass.Models.Collaborative", b =>
                {
                    b.HasOne("CacheClass.Models.Quest", "Quest")
                        .WithOne("Collaborative")
                        .HasForeignKey("CacheClass.Models.Collaborative", "QuestId")
                        .IsRequired()
                        .HasConstraintName("FK__Collabora__Quest__2739D489");

                    b.Navigation("Quest");
                });

            modelBuilder.Entity("CacheClass.Models.ContentLibaray", b =>
                {
                    b.HasOne("CacheClass.Models.Course", "Course")
                        .WithMany("ContentLibarays")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK__ContentLi__Cours__52593CB8");

                    b.HasOne("CacheClass.Models.Module", "Module")
                        .WithMany("ContentLibarays")
                        .HasForeignKey("ModuleId")
                        .HasConstraintName("FK__ContentLi__Modul__5165187F");

                    b.Navigation("Course");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("CacheClass.Models.CourseEnrollment", b =>
                {
                    b.HasOne("CacheClass.Models.Course", "Course")
                        .WithMany("CourseEnrollments")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK__Course_en__Cours__74AE54BC");

                    b.HasOne("CacheClass.Models.Learner", "Learner")
                        .WithMany("CourseEnrollments")
                        .HasForeignKey("LearnerID")
                        .HasConstraintName("FK__Course_en__Learn__75A278F5");

                    b.Navigation("Course");

                    b.Navigation("Learner");
                });

            modelBuilder.Entity("CacheClass.Models.DiscussionForum", b =>
                {
                    b.HasOne("CacheClass.Models.Course", "Course")
                        .WithMany("DiscussionForums")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK__Discussio__Cours__32AB8735");

                    b.HasOne("CacheClass.Models.Module", "Module")
                        .WithMany("DiscussionForums")
                        .HasForeignKey("ModuleId")
                        .HasConstraintName("FK__Discussio__Modul__31B762FC");

                    b.Navigation("Course");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("CacheClass.Models.EmotionalFeedback", b =>
                {
                    b.HasOne("CacheClass.Models.Learner", "Learner")
                        .WithMany("EmotionalFeedbacks")
                        .HasForeignKey("LearnerID")
                        .HasConstraintName("FK__Emotional__Learn__656C112C");

                    b.Navigation("Learner");
                });

            modelBuilder.Entity("CacheClass.Models.EmotionalfeedbackReview", b =>
                {
                    b.HasOne("CacheClass.Models.EmotionalFeedback", "FeedbackNavigation")
                        .WithMany("EmotionalfeedbackReviews")
                        .HasForeignKey("FeedbackId")
                        .IsRequired()
                        .HasConstraintName("FK__Emotional__Feedb__70DDC3D8");

                    b.HasOne("CacheClass.Models.Instructor", "Instructor")
                        .WithMany("EmotionalfeedbackReviews")
                        .HasForeignKey("InstructorId")
                        .IsRequired()
                        .HasConstraintName("FK__Emotional__Instr__71D1E811");

                    b.Navigation("FeedbackNavigation");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("CacheClass.Models.FilledSurvey", b =>
                {
                    b.HasOne("CacheClass.Models.Learner", "Learner")
                        .WithMany("FilledSurveys")
                        .HasForeignKey("LearnerID")
                        .IsRequired()
                        .HasConstraintName("FK__FilledSur__Learn__0F624AF8");

                    b.HasOne("CacheClass.Models.SurveyQuestion", "SurveyQuestion")
                        .WithMany("FilledSurveys")
                        .HasForeignKey("SurveyId", "Question")
                        .IsRequired()
                        .HasConstraintName("FK__FilledSurvey__0E6E26BF");

                    b.Navigation("Learner");

                    b.Navigation("SurveyQuestion");
                });

            modelBuilder.Entity("CacheClass.Models.HealthCondition", b =>
                {
                    b.HasOne("CacheClass.Models.PersonalizationProfile", "PersonalizationProfile")
                        .WithMany("HealthConditions")
                        .HasForeignKey("LearnerID", "ProfileId")
                        .IsRequired()
                        .HasConstraintName("FK__HealthCondition__4222D4EF");

                    b.Navigation("PersonalizationProfile");
                });

            modelBuilder.Entity("CacheClass.Models.InteractionLog", b =>
                {
                    b.HasOne("CacheClass.Models.LearningActivity", "Activity")
                        .WithMany("InteractionLogs")
                        .HasForeignKey("ActivityId")
                        .HasConstraintName("FK__Interacti__activ__619B8048");

                    b.HasOne("CacheClass.Models.Learner", "Learner")
                        .WithMany("InteractionLogs")
                        .HasForeignKey("LearnerID")
                        .HasConstraintName("FK__Interacti__Learn__628FA481");

                    b.Navigation("Activity");

                    b.Navigation("Learner");
                });

            modelBuilder.Entity("CacheClass.Models.LearnerDiscussion", b =>
                {
                    b.HasOne("CacheClass.Models.DiscussionForum", "Forum")
                        .WithMany("LearnerDiscussions")
                        .HasForeignKey("ForumId")
                        .IsRequired()
                        .HasConstraintName("FK__LearnerDi__Forum__3587F3E0");

                    b.HasOne("CacheClass.Models.Learner", "Learner")
                        .WithMany("LearnerDiscussions")
                        .HasForeignKey("LearnerID")
                        .IsRequired()
                        .HasConstraintName("FK__LearnerDi__Learn__367C1819");

                    b.Navigation("Forum");

                    b.Navigation("Learner");
                });

            modelBuilder.Entity("CacheClass.Models.LearnerMastery", b =>
                {
                    b.HasOne("CacheClass.Models.Learner", "Learner")
                        .WithMany("LearnerMasteries")
                        .HasForeignKey("LearnerID")
                        .IsRequired()
                        .HasConstraintName("FK__LearnerMa__Learn__2DE6D218");

                    b.HasOne("CacheClass.Models.Quest", "Quest")
                        .WithMany("LearnerMasteries")
                        .HasForeignKey("QuestId")
                        .IsRequired()
                        .HasConstraintName("FK__LearnerMa__Quest__2EDAF651");

                    b.Navigation("Learner");

                    b.Navigation("Quest");
                });

            modelBuilder.Entity("CacheClass.Models.LearnersCollaboration", b =>
                {
                    b.HasOne("CacheClass.Models.Learner", "Learner")
                        .WithMany("LearnersCollaborations")
                        .HasForeignKey("LearnerID")
                        .IsRequired()
                        .HasConstraintName("FK__LearnersC__Learn__2A164134");

                    b.HasOne("CacheClass.Models.Collaborative", "Quest")
                        .WithMany("LearnersCollaborations")
                        .HasForeignKey("QuestId")
                        .IsRequired()
                        .HasConstraintName("FK__LearnersC__Quest__2B0A656D");

                    b.Navigation("Learner");

                    b.Navigation("Quest");
                });

            modelBuilder.Entity("CacheClass.Models.LearningActivity", b =>
                {
                    b.HasOne("CacheClass.Models.Course", "Course")
                        .WithMany("LearningActivities")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK__LearningA__Cours__5EBF139D");

                    b.HasOne("CacheClass.Models.Module", "Module")
                        .WithMany("LearningActivities")
                        .HasForeignKey("ModuleId")
                        .HasConstraintName("FK__LearningA__Modul__5DCAEF64");

                    b.Navigation("Course");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("CacheClass.Models.LearningPath", b =>
                {
                    b.HasOne("CacheClass.Models.PersonalizationProfile", "PersonalizationProfile")
                        .WithMany("LearningPaths")
                        .HasForeignKey("LearnerID", "ProfileId")
                        .HasConstraintName("FK__Learning_path__68487DD7");

                    b.Navigation("PersonalizationProfile");
                });

            modelBuilder.Entity("CacheClass.Models.LearningPreference", b =>
                {
                    b.HasOne("CacheClass.Models.Learner", "Learner")
                        .WithMany("LearningPreferences")
                        .HasForeignKey("LearnerID")
                        .IsRequired()
                        .HasConstraintName("FK__LearningP__Learn__3C69FB99");

                    b.Navigation("Learner");
                });

            modelBuilder.Entity("CacheClass.Models.Module", b =>
                {
                    b.HasOne("CacheClass.Models.Course", "Course")
                        .WithMany("Modules")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK__Modules__CourseI__46E78A0C");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("CacheClass.Models.ModuleContent", b =>
                {
                    b.HasOne("CacheClass.Models.Course", "Course")
                        .WithMany("ModuleContents")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK__ModuleCon__Cours__4E88ABD4");

                    b.HasOne("CacheClass.Models.Module", "Module")
                        .WithMany("ModuleContents")
                        .HasForeignKey("ModuleId")
                        .IsRequired()
                        .HasConstraintName("FK__ModuleCon__Modul__4D94879B");

                    b.Navigation("Course");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("CacheClass.Models.Pathreview", b =>
                {
                    b.HasOne("CacheClass.Models.Instructor", "Instructor")
                        .WithMany("Pathreviews")
                        .HasForeignKey("InstructorId")
                        .IsRequired()
                        .HasConstraintName("FK__Pathrevie__Instr__6D0D32F4");

                    b.HasOne("CacheClass.Models.LearningPath", "Path")
                        .WithMany("Pathreviews")
                        .HasForeignKey("PathId")
                        .IsRequired()
                        .HasConstraintName("FK__Pathrevie__PathI__6E01572D");

                    b.Navigation("Instructor");

                    b.Navigation("Path");
                });

            modelBuilder.Entity("CacheClass.Models.PersonalizationProfile", b =>
                {
                    b.HasOne("CacheClass.Models.Learner", "Learner")
                        .WithMany("PersonalizationProfiles")
                        .HasForeignKey("LearnerID")
                        .IsRequired()
                        .HasConstraintName("FK__Personali__Learn__3F466844");

                    b.Navigation("Learner");
                });

            modelBuilder.Entity("CacheClass.Models.QuestReward", b =>
                {
                    b.HasOne("CacheClass.Models.Learner", "Learner")
                        .WithMany("QuestRewards")
                        .HasForeignKey("LearnerID")
                        .IsRequired()
                        .HasConstraintName("FK__QuestRewa__Learn__3B40CD36");

                    b.HasOne("CacheClass.Models.Quest", "Quest")
                        .WithMany("QuestRewards")
                        .HasForeignKey("QuestId")
                        .IsRequired()
                        .HasConstraintName("FK__QuestRewa__Quest__3A4CA8FD");

                    b.HasOne("CacheClass.Models.Reward", "Reward")
                        .WithMany("QuestRewards")
                        .HasForeignKey("RewardId")
                        .IsRequired()
                        .HasConstraintName("FK__QuestRewa__Rewar__395884C4");

                    b.Navigation("Learner");

                    b.Navigation("Quest");

                    b.Navigation("Reward");
                });

            modelBuilder.Entity("CacheClass.Models.Ranking", b =>
                {
                    b.HasOne("CacheClass.Models.Leaderboard", "Board")
                        .WithMany("Rankings")
                        .HasForeignKey("BoardId")
                        .IsRequired()
                        .HasConstraintName("FK__Ranking__BoardID__7E37BEF6");

                    b.HasOne("CacheClass.Models.Course", "Course")
                        .WithMany("Rankings")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK__Ranking__CourseI__00200768");

                    b.HasOne("CacheClass.Models.Learner", "Learner")
                        .WithMany("Rankings")
                        .HasForeignKey("LearnerID")
                        .IsRequired()
                        .HasConstraintName("FK__Ranking__Learner__7F2BE32F");

                    b.Navigation("Board");

                    b.Navigation("Course");

                    b.Navigation("Learner");
                });

            modelBuilder.Entity("CacheClass.Models.Skill", b =>
                {
                    b.HasOne("CacheClass.Models.Learner", "Learner")
                        .WithMany("Skills")
                        .HasForeignKey("LearnerID")
                        .IsRequired()
                        .HasConstraintName("FK__Skills__LearnerI__398D8EEE");

                    b.Navigation("Learner");
                });

            modelBuilder.Entity("CacheClass.Models.SkillMastery", b =>
                {
                    b.HasOne("CacheClass.Models.Quest", "Quest")
                        .WithMany("SkillMasteries")
                        .HasForeignKey("QuestId")
                        .IsRequired()
                        .HasConstraintName("FK__Skill_Mas__Quest__245D67DE");

                    b.Navigation("Quest");
                });

            modelBuilder.Entity("CacheClass.Models.SkillProgression", b =>
                {
                    b.HasOne("CacheClass.Models.Learner", "Learner")
                        .WithMany("SkillProgressions")
                        .HasForeignKey("LearnerID")
                        .HasConstraintName("FK__SkillProg__Learn__1BC821DD");

                    b.HasOne("CacheClass.Models.Skill", "Skill")
                        .WithMany("SkillProgressions")
                        .HasForeignKey("LearnerID", "SkillName")
                        .HasConstraintName("FK__SkillProgression__1AD3FDA4");

                    b.Navigation("Learner");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("CacheClass.Models.SurveyQuestion", b =>
                {
                    b.HasOne("CacheClass.Models.Survey", "Survey")
                        .WithMany("SurveyQuestions")
                        .HasForeignKey("SurveyId")
                        .IsRequired()
                        .HasConstraintName("FK__SurveyQue__Surve__0B91BA14");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("CacheClass.Models.Takenassessment", b =>
                {
                    b.HasOne("CacheClass.Models.Assessment", "Assessment")
                        .WithMany("Takenassessments")
                        .HasForeignKey("AssessmentId")
                        .IsRequired()
                        .HasConstraintName("FK__Takenasse__Asses__59FA5E80");

                    b.HasOne("CacheClass.Models.Learner", "Learner")
                        .WithMany("Takenassessments")
                        .HasForeignKey("LearnerID")
                        .IsRequired()
                        .HasConstraintName("FK__Takenasse__Learn__5AEE82B9");

                    b.Navigation("Assessment");

                    b.Navigation("Learner");
                });

            modelBuilder.Entity("CacheClass.Models.TargetTrait", b =>
                {
                    b.HasOne("CacheClass.Models.Course", "Course")
                        .WithMany("TargetTraits")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK__Target_tr__Cours__4AB81AF0");

                    b.HasOne("CacheClass.Models.Module", "Module")
                        .WithMany("TargetTraits")
                        .HasForeignKey("ModuleId")
                        .IsRequired()
                        .HasConstraintName("FK__Target_tr__Modul__49C3F6B7");

                    b.Navigation("Course");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("LearnersGoal", b =>
                {
                    b.HasOne("CacheClass.Models.LearningGoal", null)
                        .WithMany()
                        .HasForeignKey("GoalId")
                        .IsRequired()
                        .HasConstraintName("FK__LearnersG__GoalI__04E4BC85");

                    b.HasOne("CacheClass.Models.Learner", null)
                        .WithMany()
                        .HasForeignKey("LearnerID")
                        .IsRequired()
                        .HasConstraintName("FK__LearnersG__Learn__05D8E0BE");
                });

            modelBuilder.Entity("RecievedNotification", b =>
                {
                    b.HasOne("CacheClass.Models.Learner", null)
                        .WithMany()
                        .HasForeignKey("LearnerID")
                        .IsRequired()
                        .HasConstraintName("FK__RecievedN__Learn__160F4887");

                    b.HasOne("CacheClass.Models.Notification", null)
                        .WithMany()
                        .HasForeignKey("NotificationId")
                        .IsRequired()
                        .HasConstraintName("FK__RecievedN__Notif__151B244E");
                });

            modelBuilder.Entity("Teach", b =>
                {
                    b.HasOne("CacheClass.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK__Teaches__CourseI__797309D9");

                    b.HasOne("CacheClass.Models.Instructor", null)
                        .WithMany()
                        .HasForeignKey("InstructorId")
                        .IsRequired()
                        .HasConstraintName("FK__Teaches__Instruc__787EE5A0");
                });

            modelBuilder.Entity("CacheClass.Models.Assessment", b =>
                {
                    b.Navigation("Takenassessments");
                });

            modelBuilder.Entity("CacheClass.Models.Collaborative", b =>
                {
                    b.Navigation("LearnersCollaborations");
                });

            modelBuilder.Entity("CacheClass.Models.Course", b =>
                {
                    b.Navigation("Assessments");

                    b.Navigation("ContentLibarays");

                    b.Navigation("CourseEnrollments");

                    b.Navigation("DiscussionForums");

                    b.Navigation("LearningActivities");

                    b.Navigation("ModuleContents");

                    b.Navigation("Modules");

                    b.Navigation("Rankings");

                    b.Navigation("TargetTraits");
                });

            modelBuilder.Entity("CacheClass.Models.DiscussionForum", b =>
                {
                    b.Navigation("LearnerDiscussions");
                });

            modelBuilder.Entity("CacheClass.Models.EmotionalFeedback", b =>
                {
                    b.Navigation("EmotionalfeedbackReviews");
                });

            modelBuilder.Entity("CacheClass.Models.Instructor", b =>
                {
                    b.Navigation("EmotionalfeedbackReviews");

                    b.Navigation("Pathreviews");
                });

            modelBuilder.Entity("CacheClass.Models.Leaderboard", b =>
                {
                    b.Navigation("Rankings");
                });

            modelBuilder.Entity("CacheClass.Models.Learner", b =>
                {
                    b.Navigation("CourseEnrollments");

                    b.Navigation("EmotionalFeedbacks");

                    b.Navigation("FilledSurveys");

                    b.Navigation("InteractionLogs");

                    b.Navigation("LearnerDiscussions");

                    b.Navigation("LearnerMasteries");

                    b.Navigation("LearnersCollaborations");

                    b.Navigation("LearningPreferences");

                    b.Navigation("PersonalizationProfiles");

                    b.Navigation("QuestRewards");

                    b.Navigation("Rankings");

                    b.Navigation("SkillProgressions");

                    b.Navigation("Skills");

                    b.Navigation("Takenassessments");
                });

            modelBuilder.Entity("CacheClass.Models.LearningActivity", b =>
                {
                    b.Navigation("InteractionLogs");
                });

            modelBuilder.Entity("CacheClass.Models.LearningPath", b =>
                {
                    b.Navigation("Pathreviews");
                });

            modelBuilder.Entity("CacheClass.Models.Module", b =>
                {
                    b.Navigation("Assessments");

                    b.Navigation("ContentLibarays");

                    b.Navigation("DiscussionForums");

                    b.Navigation("LearningActivities");

                    b.Navigation("ModuleContents");

                    b.Navigation("TargetTraits");
                });

            modelBuilder.Entity("CacheClass.Models.PersonalizationProfile", b =>
                {
                    b.Navigation("HealthConditions");

                    b.Navigation("LearningPaths");
                });

            modelBuilder.Entity("CacheClass.Models.Quest", b =>
                {
                    b.Navigation("Collaborative");

                    b.Navigation("LearnerMasteries");

                    b.Navigation("QuestRewards");

                    b.Navigation("SkillMasteries");
                });

            modelBuilder.Entity("CacheClass.Models.Reward", b =>
                {
                    b.Navigation("QuestRewards");
                });

            modelBuilder.Entity("CacheClass.Models.Skill", b =>
                {
                    b.Navigation("SkillProgressions");
                });

            modelBuilder.Entity("CacheClass.Models.Survey", b =>
                {
                    b.Navigation("SurveyQuestions");
                });

            modelBuilder.Entity("CacheClass.Models.SurveyQuestion", b =>
                {
                    b.Navigation("FilledSurveys");
                });
#pragma warning restore 612, 618
        }
    }
}
